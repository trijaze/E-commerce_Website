-- ==========================================
-- üì¶ B√ÅCH H√ìA ONLINE DATABASE ‚Äì FULL RESET
-- Stack: MySQL 8.x (utf8mb4)
-- ==========================================

/* Reset database */
DROP DATABASE IF EXISTS bachhoa;
CREATE DATABASE bachhoa CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;
USE bachhoa;

SET NAMES utf8mb4;
SET time_zone = '+07:00';

-- ------------------------------------------
-- Drop views first (if any)
-- ------------------------------------------
DROP VIEW IF EXISTS view_product_stock;
DROP VIEW IF EXISTS view_variant_stock;
DROP VIEW IF EXISTS view_product_avg_rating;

-- ------------------------------------------
-- Drop tables (order matters)
-- ------------------------------------------
SET FOREIGN_KEY_CHECKS = 0;
DROP TABLE IF EXISTS inventory_logs;
DROP TABLE IF EXISTS inventories;
DROP TABLE IF EXISTS reviews;
DROP TABLE IF EXISTS productvariants;
DROP TABLE IF EXISTS productimages;
DROP TABLE IF EXISTS products;
DROP TABLE IF EXISTS users;
SET FOREIGN_KEY_CHECKS = 1;

-- =========================
-- 1) USERS
-- =========================
CREATE TABLE users (
  id INT AUTO_INCREMENT PRIMARY KEY,
  name VARCHAR(100),
  email VARCHAR(150) UNIQUE,
  role ENUM('USER','ADMIN') DEFAULT 'USER',
  createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

INSERT INTO users (name, email, role) VALUES
('Alice', 'alice@test.com', 'USER'),
('Bob',   'bob@test.com',   'ADMIN');

-- =========================
-- 2) PRODUCTS
-- =========================
CREATE TABLE products (
  productId  INT AUTO_INCREMENT PRIMARY KEY,
  name       VARCHAR(255) NOT NULL,
  description TEXT,
  basePrice  DECIMAL(10,2) NOT NULL,
  categoryId INT,
  createdAt  TIMESTAMP DEFAULT CURRENT_TIMESTAMP
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

INSERT INTO products (name, description, basePrice, categoryId) VALUES
('T√°o ƒë·ªè Fuji',         'T√°o ƒë·ªè nh·∫≠p kh·∫©u gi√≤n ng·ªçt, h∆∞∆°ng v·ªã t∆∞∆°i m√°t.', 45000, 1),
('Cam M·ªπ Sunkist',      'Cam v√†ng M·ªπ ng·ªçt, m·ªçng n∆∞·ªõc v√† th∆°m.',           55000, 1),
('Chu·ªëi ti√™u',          'Chu·ªëi ti√™u s·∫°ch, th∆°m t·ª± nhi√™n, b·ªï d∆∞·ª°ng.',      25000, 2),
('D∆∞a h·∫•u kh√¥ng h·∫°t',   'D∆∞a h·∫•u ƒë·ªè ng·ªçt thanh, kh√¥ng h·∫°t.',              30000, 2);

-- =========================
-- 3) PRODUCT IMAGES (‚â•2 ·∫£nh / s·∫£n ph·∫©m)
-- =========================
CREATE TABLE productimages (
  imageId   INT AUTO_INCREMENT PRIMARY KEY,
  productId INT NOT NULL,
  imageUrl  VARCHAR(500) NOT NULL,
  isMain    BOOLEAN DEFAULT FALSE,
  FOREIGN KEY (productId) REFERENCES products(productId) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- ·∫¢nh ch√≠nh (isMain = TRUE) ‚Äì gi·ªØ link ƒë√∫ng t√™n SP
INSERT INTO productimages (productId, imageUrl, isMain) VALUES
(1, 'https://cdn.tgdd.vn/Products/Images/8788/282550/bhx/tao-do-fuji-tui-1kg-202212271118435261.jpg', TRUE),
(2, 'https://cdn.tgdd.vn/Products/Images/8788/282545/bhx/cam-my-sunkist-tui-1kg-202212271122395153.jpg', TRUE),
(3, 'https://cdn.tgdd.vn/Products/Images/8788/282546/bhx/chuoi-tieu-1kg-202212271119235246.jpg', TRUE),
(4, 'https://cdn.tgdd.vn/Products/Images/8788/285046/bhx/dua-hau-khong-hat-1kg-20240102090905.jpg', TRUE);

-- ·∫¢nh ph·ª• (isMain = FALSE) ‚Äì ·∫£nh minh h·ªça ƒë√∫ng lo·∫°i
INSERT INTO productimages (productId, imageUrl, isMain) VALUES
(1, 'https://images.unsplash.com/photo-1567306226416-28f0efdc88ce', FALSE), -- T√°o
(2, 'https://images.unsplash.com/photo-1547514701-9cdcb1f59486',   FALSE), -- Cam
(3, 'https://images.unsplash.com/photo-1571772996211-2f02b77fc5f8', FALSE), -- Chu·ªëi
(4, 'https://images.unsplash.com/photo-1598966733531-9b52ad2aaf4d', FALSE); -- D∆∞a h·∫•u

-- =========================
-- 4) PRODUCT VARIANTS (c√≥ m·ªü r·ªông t·ª´ng lo·∫°i)
-- =========================
CREATE TABLE productvariants (
  variantId INT AUTO_INCREMENT PRIMARY KEY,
  productId INT NOT NULL,
  attributes JSON,
  price     DECIMAL(10,2),
  FOREIGN KEY (productId) REFERENCES products(productId) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- Bi·∫øn th·ªÉ g·ªëc (t·ª´ script tr∆∞·ªõc)
INSERT INTO productvariants (productId, attributes, price) VALUES
(1, JSON_OBJECT('size','1kg'),         45000),
(1, JSON_OBJECT('size','2kg'),         88000),
(2, JSON_OBJECT('size','1kg'),         55000),
(3, JSON_OBJECT('size','1kg'),         25000),
(4, JSON_OBJECT('size','1 qu·∫£ (2kg)'), 60000);

-- Bi·∫øn th·ªÉ m·ªü r·ªông theo t·ª´ng s·∫£n ph·∫©m
-- SP1: T√°o ƒë·ªè Fuji ‚Üí th√™m 0.5kg, 3kg
INSERT INTO productvariants (productId, attributes, price) VALUES
(1, JSON_OBJECT('size','0.5kg'), 23000),
(1, JSON_OBJECT('size','3kg'),   129000);

-- SP2: Cam M·ªπ Sunkist ‚Üí th√™m 0.5kg, 2kg
INSERT INTO productvariants (productId, attributes, price) VALUES
(2, JSON_OBJECT('size','0.5kg'), 29000),
(2, JSON_OBJECT('size','2kg'),   108000);

-- SP3: Chu·ªëi ti√™u ‚Üí th√™m 2kg, 3kg
INSERT INTO productvariants (productId, attributes, price) VALUES
(3, JSON_OBJECT('size','2kg'), 48000),
(3, JSON_OBJECT('size','3kg'), 70000);

-- SP4: D∆∞a h·∫•u kh√¥ng h·∫°t ‚Üí th√™m 1/2 qu·∫£, 1 qu·∫£ to
INSERT INTO productvariants (productId, attributes, price) VALUES
(4, JSON_OBJECT('size','1/2 qu·∫£ (~1kg)'), 32000),
(4, JSON_OBJECT('size','1 qu·∫£ to (3kg)'), 85000);

-- =========================
-- 5) INVENTORY (t·ªìn kho) + LOG
-- =========================
CREATE TABLE inventories (
  variantId INT PRIMARY KEY,
  quantity  INT NOT NULL DEFAULT 0,
  reserved  INT NOT NULL DEFAULT 0,
  updatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  FOREIGN KEY (variantId) REFERENCES productvariants(variantId) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

CREATE TABLE inventory_logs (
  id        BIGINT AUTO_INCREMENT PRIMARY KEY,
  variantId INT NOT NULL,
  changeQty INT NOT NULL,
  reason    VARCHAR(100),
  orderId   INT NULL,
  createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (variantId) REFERENCES productvariants(variantId) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- Seed t·ªìn kho m·∫∑c ƒë·ªãnh cho T·∫§T C·∫¢ bi·∫øn th·ªÉ (30 ƒë∆°n v·ªã)
INSERT INTO inventories (variantId, quantity, reserved)
SELECT variantId, 30, 0 FROM productvariants;

-- Ghi log seed t∆∞∆°ng ·ª©ng
INSERT INTO inventory_logs (variantId, changeQty, reason)
SELECT variantId, 30, 'seed' FROM productvariants;

-- (Tu·ª≥ ch·ªçn) Procedure ƒëi·ªÅu ch·ªânh t·ªìn kho + log
DELIMITER //
DROP PROCEDURE IF EXISTS sp_adjust_stock //
CREATE PROCEDURE sp_adjust_stock(IN p_variantId INT, IN p_delta INT, IN p_reason VARCHAR(100), IN p_orderId INT)
BEGIN
  INSERT INTO inventories(variantId, quantity)
  VALUES (p_variantId, IFNULL(p_delta,0))
  ON DUPLICATE KEY UPDATE quantity = quantity + VALUES(quantity);

  INSERT INTO inventory_logs(variantId, changeQty, reason, orderId)
  VALUES (p_variantId, p_delta, p_reason, p_orderId);
END //
DELIMITER ;

-- =========================
-- 6) REVIEWS + VIEW AVG RATING
-- =========================
CREATE TABLE reviews (
  id         INT AUTO_INCREMENT PRIMARY KEY,
  product_id INT NOT NULL,
  user_id    INT NOT NULL,
  rating     INT CHECK (rating BETWEEN 1 AND 5),
  comment    TEXT,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (product_id) REFERENCES products(productId) ON DELETE CASCADE,
  FOREIGN KEY (user_id)   REFERENCES users(id) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

INSERT INTO reviews (product_id, user_id, rating, comment) VALUES
(1, 1, 5, 'T√°o r·∫•t gi√≤n v√† ng·ªçt, giao h√†ng nhanh!'),
(1, 2, 4, 'H√†ng t∆∞∆°i nh∆∞ng h∆°i √≠t n∆∞·ªõc.'),
(2, 1, 5, 'Cam M·ªπ th∆°m ngon, ƒë√°ng ti·ªÅn.'),
(3, 2, 3, 'Chu·ªëi ·ªïn, nh∆∞ng ch∆∞a ch√≠n k·ªπ.'),
(4, 1, 5, 'D∆∞a h·∫•u r·∫•t ngon v√† ng·ªçt.');

CREATE VIEW view_product_avg_rating AS
SELECT 
  p.productId,
  p.name,
  ROUND(AVG(r.rating),1) AS avgRating,
  COUNT(r.id)            AS totalReviews
FROM products p
LEFT JOIN reviews r ON p.productId = r.product_id
GROUP BY p.productId;

-- =========================
-- 7) VIEW T·ªíN KHO
-- =========================
CREATE VIEW view_variant_stock AS
SELECT v.variantId, v.productId, v.price,
       IFNULL(i.quantity,0) AS quantity,
       IFNULL(i.reserved,0) AS reserved,
       GREATEST(IFNULL(i.quantity,0) - IFNULL(i.reserved,0), 0) AS available
FROM productvariants v
LEFT JOIN inventories i ON i.variantId = v.variantId;

CREATE VIEW view_product_stock AS
SELECT p.productId,
       SUM(GREATEST(IFNULL(i.quantity,0) - IFNULL(i.reserved,0),0)) AS totalAvailable
FROM products p
LEFT JOIN productvariants v ON v.productId = p.productId
LEFT JOIN inventories i ON i.variantId = v.variantId
GROUP BY p.productId;

-- =========================
-- 8) INDEXES (t·ªëi ∆∞u truy v·∫•n)
-- =========================
CREATE INDEX idx_productimages_product  ON productimages(productId);
CREATE INDEX idx_productvariants_product ON productvariants(productId);
CREATE INDEX idx_reviews_product        ON reviews(product_id);
CREATE INDEX idx_reviews_user           ON reviews(user_id);

-- =========================
-- ‚úÖ TEST QUICK
-- =========================
-- SELECT * FROM products;
-- SELECT * FROM productimages ORDER BY productId, isMain DESC, imageId;
-- SELECT productId, variantId, JSON_EXTRACT(attributes, '$.size') AS size, price FROM productvariants ORDER BY productId, variantId;
-- SELECT * FROM view_variant_stock ORDER BY productId, variantId;
-- SELECT * FROM view_product_stock ORDER BY productId;
-- SELECT * FROM view_product_avg_rating ORDER BY productId;

-- V√≠ d·ª• ƒëi·ªÅu ch·ªânh t·ªìn kho:
-- CALL sp_adjust_stock(1, -2, 'order #123', 123);
