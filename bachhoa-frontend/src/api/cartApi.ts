// üõí API gi·ªè h√†ng k·∫øt n·ªëi t·ªõi BE Tomcat
const BASE_URL = "http://localhost:8080/bachhoa-backend/api/cart";

//  L·∫•y danh s√°ch s·∫£n ph·∫©m trong gi·ªè h√†ng (GET /api/cart)
export async function getCartItems() {
  try {
    const res = await fetch(BASE_URL, {
      method: "GET",
      credentials: "include", // G·ª¨I COOKIE SESSION ƒê·ªÇ TOMCAT NH·∫¨N userId
    });
    if (!res.ok) throw new Error(`Kh√¥ng th·ªÉ t·∫£i gi·ªè h√†ng (${res.status})`);
    return await res.json();
  } catch (err) {
    console.error(" L·ªói khi l·∫•y gi·ªè h√†ng:", err);
    return [];
  }
}

//  Th√™m s·∫£n ph·∫©m v√†o gi·ªè (POST /api/cart)
export async function addToCart(productId: number, quantity: number = 1) {
  try {
    const res = await fetch(BASE_URL, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      credentials: "include", // G·ª¨I COOKIE SESSION
      body: JSON.stringify({ productId, quantity }),
    });
    if (!res.ok) throw new Error(`Kh√¥ng th·ªÉ th√™m s·∫£n ph·∫©m (${res.status})`);
    return await res.json();
  } catch (err) {
    console.error(" L·ªói khi th√™m v√†o gi·ªè:", err);
    return { message: "Th√™m th·∫•t b·∫°i" };
  }
}

//  X√≥a 1 s·∫£n ph·∫©m kh·ªèi gi·ªè
export async function removeFromCart(productId: number) {
  try {
    const res = await fetch(BASE_URL, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      credentials: "include",
      body: JSON.stringify({ productId }),
    });
    if (!res.ok) throw new Error(`Kh√¥ng th·ªÉ x√≥a s·∫£n ph·∫©m (${res.status})`);
    return await res.json();
  } catch (err) {
    console.error(" L·ªói khi x√≥a s·∫£n ph·∫©m:", err);
    return { message: "X√≥a th·∫•t b·∫°i" };
  }
}

//  X√≥a to√†n b·ªô gi·ªè h√†ng
export async function clearCart() {
  try {
    const res = await fetch(BASE_URL, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      credentials: "include",
      body: JSON.stringify({ action: "clear" }),
    });
    if (!res.ok) throw new Error(`Kh√¥ng th·ªÉ x√≥a gi·ªè h√†ng (${res.status})`);
    return await res.json();
  } catch (err) {
    console.error(" L·ªói khi x√≥a gi·ªè h√†ng:", err);
    return { message: "X√≥a gi·ªè th·∫•t b·∫°i" };
  }
}

// üîÑ C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng s·∫£n ph·∫©m trong gi·ªè
export async function updateQuantity(productId: number, quantity: number) {
  try {
    const res = await fetch(BASE_URL, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      credentials: "include",
      body: JSON.stringify({ productId, quantity, action: "update" }),
    });
    if (!res.ok) throw new Error(`Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng (${res.status})`);
    return await res.json();
  } catch (err) {
    console.error(" L·ªói khi c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng:", err);
    return { message: "C·∫≠p nh·∫≠t th·∫•t b·∫°i" };
  }
}

// üóëÔ∏è X√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè (alias cho removeFromCart)
export async function deleteCartItem(productId: number) {
  return removeFromCart(productId);
}
